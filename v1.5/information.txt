1.关于.h头文件,内容改名的问题,会爆炸

2.在struct node(client/server)的问题上,需要分开定义,即使是同一个结构体

3.在封装链表的时候,遇到了"Warning:control may reach end of non-void"

  的问题,分析后,觉得时编辑器对于返回值的严格要求,末尾加上"return 0"即可

4.关于声明的问题,要在多个.c文件中使用的全局变量如何声明的问题

  1>,主c中声明,.h中extern引用,在其他文件中只是引用.

  2>,切记,需要放在想对全局的位置,不然就变成局部的变量,即使使用extern也不会编译成功

5.epoll莫名其妙的一直只返回0.没办法继续处理,传错参数

  但是,后面传入正确参数的时候,还是爆炸

6.epoll_wait之后的等待,记住是进行遍历数组所以问题处理上,for(i = 0;i < ret;i++);

7.请一定要处理好分包,黏包的情况,三种方法,建议采用 while(ret != sizeof(struct node))的方式

8.最后,对于服务端的逻辑处理,谨慎对待

9.被break和while,switch联合起来教做人

10.使用a+打开,注意文件指针位置的问题

11.进行printf出错判断时,记得加上'\n',!!!

12.逻辑处理的问题

13.很多的玄学Bug,若实在无法解决,请尝试关闭文件后,重新打开

14.关于多文件,头文件之类的重复定义问题,有时间真的需要好好学学编译原理

15.进行好友的添加时,必须写准文件路径,尤其是进行文件操作,而非数据库操作!!!切记!!!

16.发现了一个黑科技 system函数,但是system函数有风险,建议谨慎使用,可以使用popen进行替换

17.在Linux实现是程序暂时暂停的方案

  system("pause")是不存在的

  然后个getch仅仅是宏定义,虽然可以使用,但是会清屏

  最后,getchar,因为缓冲区的问题,进行小的改动后,即可正常使用,实现程序的中途暂停

  getchar( );
      
  if((ch = getchar( )) == '\n')
  
  return ;

18."\033[01;34m Hello World\033[0m\n",可以使用此通式进行printf有颜色字符串的打印

19,使用信号函数signal(SIGINT/SIGPIPE,SIG_IGN);使客户端和服务端保持稳定,健壮性.

20.客户端设置的buffer需要进行解释,还有,文件操作是真得快把我写吐了...

21.服务端直接Ctrl-C会爆炸,谨慎处理,使用signal将SIGINT屏蔽掉即可

22.一开始采用了用户多级目录的安排,最后导致目录级数过于复杂,自己无法很好的组织程序

   最后,想通了,群聊起始都是公共资源,不需要在每个用户中进行存储,所以重新设计目录树

   会使得程序变得更简单

23.摸索出了,为什么ctime之后会乱序,问题在于,此字符串中间,其实还存在这许多的空隙

  现在有两种办法,第一种对字符串进行改造,第二种,使用fread,fwrite整块读取

  现在尝试对其进行字符串的改造

24.群聊时,公共缓冲区的问题,只能靠链表解决,多人就显示出链表的优点了

  实质上,离线消息和消息盒子,是同一概念的东西

25.没有实现多批次处理想消息盒子,时间关系,见谅.Server端的链表处理的很得当,

  Client端使用的全局加静态链接,单用户效果还不错,多用户,BOOM!

26: 进行程序设计的模块化思想,在Server端sign_register函数中深有体会

  模块化的程序设计思想,很重要!!!

27:请严格把控如何使用链表节点,一旦用错,就是爆炸

28:让离线消息发的时间稍微延后,不候会被登录清屏

29:理解链表与全局+静态链接实质意义

30:使用epoll不能忽略SIGPIPE信号

31:切记两端的结构体必须相同,不然就是爆炸操作

32:使用改变终端属性的方法,来进行getch( )函数的功能实现

33:艹尼玛,艹尼玛,又是break.我真的是一万句mmp! ! !
